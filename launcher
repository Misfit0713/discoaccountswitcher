#!/usr/bin/bash

# Edit this line so it points to the wine prefix that you use for your game
prefix="/path/to/.winedisco"
wine="/path/to/staging-2.21/bin/wine"
acct="/path/to/launcheraccts.xml"

option=$1 # options are list and select
select=$2 # account number if you're using the select option

	
# If <select> is "list", we show all the available accounts and which number corresponds to them for selection
if [ "$option" = "list" ];
then
	count=1
	while read line;
	do
		printf "Account #: `echo $count`\n"
		printf "Account name: `xmlstarlet sel -t -v '//account' -nl $acct | awk 'NR=='$count` \n"
	
		printf "Account description: `xmlstarlet sel -t -v '//account/@description' -nl $acct | awk 'NR=='$count` \n\n"
		((count++))
	done < $acct

elif [ "$option" = "select" ];
then
	if [ -n "$select" ];
	then
		# Here we fetch the code and sig for the selected account
		signature=`xmlstarlet sel -t -v '//account/@signature' -nl $acct | awk 'NR=='$select`
		code=`xmlstarlet sel -t -v '//account/@code' -nl $acct | awk 'NR=='$select`
	
		# Here we create a windows .reg file which contains modified keys for your wine registry, then puts the code and sig we aqcuired above into that key
		printf "Windows Registry Editor Version 5.00\n\n" > key.reg
		echo "[HKEY_CURRENT_USER\Software\Microsoft\Microsoft Games\Freelancer\1.0]" >> key.reg # I couldn't get the '\1.' to work in printf so I said fuck it echo
		printf '"MPAccountName"="'$code'"\n' >> key.reg
		printf '"MPAccountNameSig"="'$signature'"\n' >> key.reg
	
		# Here we execute regedit in your wine prefix you specified earlier, and import the registry key we just created
		eval "$prefix $wine regedit.exe key.reg > /dev/null 2>&1"

		# Tell the user we did the thing
		printf "Account number "$select", `xmlstarlet sel -t -v '//account' -nl $acct | awk 'NR=='$select`, set!\n"
	
		# Then we delete it because temp files are, well, temporary
		rm key.reg
	else
		printf "No account selected. Please select an account number, you can find out your account numbers by using the \"list\" option\n"
	fi

# you can modify this statement so that you can launch the game using the script by using the "launch" option. How you start your game is your business, but you can chuch it here if you'd like.
elif [ "$option" = "launch" ];
then
	.scripts/discovery	

else
	printf "Hey, you didn't give me an option. What do you want me to do? Your options are: list, select, or launch (but only if you've modified the script to do that)\n"
	printf "Example usage: ./launcher list, ./launcher select 6, ./launcher launch\n"
fi

